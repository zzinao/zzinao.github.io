{"componentChunkName":"component---src-templates-category-template-js","path":"/posts/리팩토링","result":{"pageContext":{"currentCategory":"리팩토링","categories":["All","WIL","리팩토링"],"edges":[{"node":{"id":"9c51e28e-20b1-5fea-a2a1-87933fa8a349","excerpt":"1. 판도라의 상자.. 아니 컴포넌트를 열다 올해 새 업무를 들어가면서, 작년에 만든 프로젝트를 새로 개편하게 되었습니다. 프로젝트 베이스는 같지만 기능이 새로 추가되고 페이지 화면 UI가 완전히 바뀌어서 기존 코드를 기반으로 새로 짜야 하는 상황이라 끝난 줄만 알았던 그 코드들을 오랜만에 꺼내보니 경악을 금치 못했습니다. (물론 그 당시에도 진행하면서 경악했지만..) 위와 같이 props를 적게는 10개 많게는 20개를 넘는 컴포넌트가 넘쳐났기 때문입니다.ㅎㅎ\n물론 props를 무작정 많이 받는 게 잘못은 아니라곤 생각하지만… 저렇게 되면 1)가독성이 매우 나빠지고 2)유지 보수가 힘들고 3)에러 추적이 힘듭니다. 물론 컴포넌트가 서버 api를 받아서 보여주는 거라면 spread 문법을 통해서 간결하게 보여줄 순 있겠지만 같은 값이라도 api마다 변수명이 달랐기에.. 재 생각엔 한 번의 가공 처리가 필수였습니다. 🥹 잠시만! 저렇게 된 이유가 있다구요..! 👼🏻(반년전의 나) : …","fields":{"slug":"/refactoring-compound-pattern/"},"frontmatter":{"categories":"리팩토링","title":"리팩토링에 대한 고찰1 (feat.컴파운드 패턴)","date":"March 10, 2024"}},"next":null,"previous":{"fields":{"slug":"/wil-240302/"}}}]}},"staticQueryHashes":["1073350324","1956554647","2938748437"]}